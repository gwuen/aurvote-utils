#!/usr/bin/env python

import argparse
import bs4
import collections
import getpass
import requests
import sys

LOGIN_URL = "https://aur.archlinux.org/login/"
PACKAGES_URL = "https://aur.archlinux.org/packages/"

SEARCH_URL_TEMPLATE = "https://aur.archlinux.org/packages/?O=%d&SO=d&PP=250&do_Search=Go&SB=w"
VOTE_URL_TEMPLATE = "https://aur.archlinux.org/pkgbase/%s/vote/"
UNVOTE_URL_TEMPLATE = "https://aur.archlinux.org/pkgbase/%s/unvote/"

Package = collections.namedtuple("Package", ("name", "version", "votes", "popularity", "voted", "notify", "description", "maintainer"))

class CustomHelpFormatter(argparse.HelpFormatter):
   def _format_args(self, action, default_metavar):
        return "<%s>..." % self._metavar_formatter(action, default_metavar)(1)

def decode(response):
    return bs4.BeautifulSoup(response.text, "html.parser")

def login(session, username, password):
    soup = decode(session.post(LOGIN_URL, {
        "user": username, "passwd": password
    }))

    return soup.select_one("a[href=\"/logout/\"]") != None

def get_token(session):
    soup = decode(session.get(PACKAGES_URL))
    return soup.select_one("input[name=token]")["value"]

def get_voted(session):
    offset = 0

    while True:
        soup = decode(session.get(SEARCH_URL_TEMPLATE % offset))

        for row in soup.select("tbody > tr"):
            pkg = Package(*(column.get_text(strip=True) for column in row.select("td")[1:]))

            if not pkg.voted:
                return

            yield pkg

        offset += 250

def vote(session, token, pkg):
    response = session.post(VOTE_URL_TEMPLATE % pkg, {
        "token": token, "do_Vote": pkg
    }, allow_redirects=False)

    return response.status_code == requests.codes.found

def unvote(session, token, pkg):
    response = session.post(UNVOTE_URL_TEMPLATE % pkg, {
        "token": token, "do_UnVote": pkg
    }, allow_redirects=False)

    return response.status_code == requests.codes.found

def main():
    parser = argparse.ArgumentParser(usage="%(prog)s [(-l | (-v | -u) <pkg>...) <username>]", formatter_class=CustomHelpFormatter)

    parser.add_argument("-l", "--list", action="store_true", dest="list", help="list the voted packages (default)")
    parser.add_argument("-v", "--vote", nargs="+", type=str, dest="vote_pkgs", metavar="pkg", help="vote for package(s)")
    parser.add_argument("-u", "--unvote", nargs="+", type=str, dest="unvote_pkgs", metavar="pkg", help="unvote package(s)")
    parser.add_argument("username", type=str, help="the username to login with")

    args = parser.parse_args()

    if len(sys.argv) > 2:
        session = requests.Session()

        if login(session, args.username, getpass.getpass()):
            if args.list:
                for pkg in sorted(get_voted(session)):
                    print(pkg.name)

            elif args.vote_pkgs != None:
                token = get_token(session)

                for pkg in args.vote_pkgs:
                    if not vote(session, token, pkg):
                        print("unable to vote %s" % pkg)

            elif args.unvote_pkgs != None:
                token = get_token(session)

                for pkg in args.unvote_pkgs:
                    if not unvote(session, token, pkg):
                        print("unable to unvote %s" % pkg)
        else:
            parser.error("unable to login")
    else:
        parser.print_help()

if __name__ == "__main__":
    main()
